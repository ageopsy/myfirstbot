from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    ApplicationBuilder, MessageHandler, CommandHandler, CallbackQueryHandler,
    ContextTypes, filters
)

# –¢–≤–æ–π Telegram Bot API —Ç–æ–∫–µ–Ω
BOT_TOKEN = "7840656624:AAHGSvPGLLv3AVMOcmxl21ZPAyDr9LrKCjo"

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (—Ç–≤–æ–µ Telegram ID)
ADMIN_ID = 209559273

anon_users = {}
user_to_anon = {}
anon_counter = 1

# –°—Ç–∞—Ä—Ç ‚Äî –∫–∞—Ä—Ç–∏–Ω–∫–∞ + —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    with open("/Users/geo/Downloads/–ë–æ—Ç/welcome.jpg", "rb") as photo:
        await context.bot.send_photo(
            chat_id=update.effective_chat.id,
            photo=photo
        )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    await update.message.reply_text(
        "–û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ ‚Äî –∏ —è –∞–Ω–æ–Ω–∏–º–Ω–æ –ø–µ—Ä–µ–¥–∞–º —ç—Ç–æ –∞–¥–º–∏–Ω—É –∫–∞–Ω–∞–ª–∞ –î–µ—à—ë–≤—ã–π –î–æ—Ñ–∞–º–∏–Ω (–ù–∞—Å—Ç–µ) üòä"
    )

# /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "/start ‚Äî –Ω–∞—á–∞—Ç—å\n"
        "/help ‚Äî –ø–æ–º–æ—â—å\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ) ‚Äî –æ–Ω–æ –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–æ –∞–Ω–æ–Ω–∏–º–Ω–æ."
    )

# –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ ID
def get_anon_id(user_id):
    global anon_counter
    if user_id not in user_to_anon:
        anon_id = f"User#{anon_counter}"
        anon_users[anon_id] = user_id
        user_to_anon[user_id] = anon_id
        anon_counter += 1
    return user_to_anon[user_id]

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id

    if user_id == ADMIN_ID and context.user_data.get("reply_to_user"):
        target_user = context.user_data.pop("reply_to_user")
        await context.bot.send_message(chat_id=target_user, text=f"üí¨ –û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n{update.message.text}")
        await update.message.reply_text("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
        return

    anon_id = get_anon_id(user_id)
    text = update.message.text

    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply:{anon_id}")]
    ])

    await context.bot.send_message(
        chat_id=ADMIN_ID,
        text=f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {anon_id}:\n\n{text}",
        reply_markup=keyboard
    )

    await update.message.reply_text("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–Ω–æ–Ω–∏–º–Ω–æ!")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ
async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id

    if user_id == ADMIN_ID and context.user_data.get("reply_to_user"):
        target_user = context.user_data.pop("reply_to_user")
        photo = update.message.photo[-1].file_id
        caption = update.message.caption or ""
        await context.bot.send_photo(chat_id=target_user, photo=photo, caption=f"üí¨ –û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n{caption}")
        await update.message.reply_text("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
        return

    anon_id = get_anon_id(user_id)
    photo = update.message.photo[-1].file_id
    caption = update.message.caption or ""

    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply:{anon_id}")]
    ])

    await context.bot.send_photo(
        chat_id=ADMIN_ID,
        photo=photo,
        caption=f"üì∑ –§–æ—Ç–æ –æ—Ç {anon_id}:\n{caption}",
        reply_markup=keyboard
    )

    await update.message.reply_text("‚úÖ –§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–Ω–æ–Ω–∏–º–Ω–æ!")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ
async def handle_video(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id

    if user_id == ADMIN_ID and context.user_data.get("reply_to_user"):
        target_user = context.user_data.pop("reply_to_user")
        video = update.message.video.file_id
        caption = update.message.caption or ""
        await context.bot.send_video(chat_id=target_user, video=video, caption=f"üí¨ –û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n{caption}")
        await update.message.reply_text("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
        return

    anon_id = get_anon_id(user_id)
    video = update.message.video.file_id
    caption = update.message.caption or ""

    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply:{anon_id}")]
    ])

    await context.bot.send_video(
        chat_id=ADMIN_ID,
        video=video,
        caption=f"üé• –í–∏–¥–µ–æ –æ—Ç {anon_id}:\n{caption}",
        reply_markup=keyboard
    )

    await update.message.reply_text("‚úÖ –í–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–Ω–æ–Ω–∏–º–Ω–æ!")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ ¬´–û—Ç–≤–µ—Ç–∏—Ç—å¬ª
async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    data = query.data
    if data.startswith("reply:"):
        anon_id = data.split(":")[1]
        if anon_id in anon_users:
            context.user_data["reply_to_user"] = anon_users[anon_id]
            await query.message.reply_text("‚úèÔ∏è –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –æ—Ç–≤–µ—Ç ‚Äî –æ–Ω –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
        else:
            await query.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
app = ApplicationBuilder().token(BOT_TOKEN).build()

app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("help", help_command))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
app.add_handler(MessageHandler(filters.PHOTO, handle_photo))
app.add_handler(MessageHandler(filters.VIDEO, handle_video))
app.add_handler(CallbackQueryHandler(button_callback))

print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã!")
app.run_polling()
